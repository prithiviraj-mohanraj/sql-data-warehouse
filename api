#!/usr/bin/env python3
import argparse
from requests_oauthlib import OAuth1

TOKENS_PER_API = 4  # consumer_key, consumer_secret, access_token, access_secret


def split_into_groups(items, group_size):
    """Split a flat list into equal-sized chunks."""
    return [items[pos:pos + group_size] for pos in range(0, len(items), group_size)]


def parse_cli_arguments():
    parser = argparse.ArgumentParser(description="Parse API credentials and configuration.")
    parser.add_argument("system_name")
    parser.add_argument("api_urls", help="Comma-separated API URLs")
    parser.add_argument("api_tokens", help="Comma-separated credentials (4 per API)")
    parser.add_argument("refresh_mode")
    parser.add_argument("refresh_token")
    parser.add_argument("token_url")
    parser.add_argument("db_table")
    return parser.parse_args()


def build_api_config(arguments):
    api_urls = [url.strip() for url in arguments.api_urls.split(",") if url.strip()]
    flat_tokens = [token.strip() for token in arguments.api_tokens.split(",") if token.strip()]

    if len(flat_tokens) != len(api_urls) * TOKENS_PER_API:
        raise ValueError(f"Expected {TOKENS_PER_API} tokens per API, "
                         f"got {len(flat_tokens)} for {len(api_urls)} URLs.")

    grouped_tokens = split_into_groups(flat_tokens, TOKENS_PER_API)

    api_configs = []
    for api_url, token_group in zip(api_urls, grouped_tokens):
        consumer_key, consumer_secret, access_token, access_secret = token_group

        oauth_session = OAuth1(
            consumer_key,
            consumer_secret,
            access_token,
            access_secret
        )

        api_configs.append({
            "url": api_url,
            "auth": oauth_session
        })

    return {
        "system_name": arguments.system_name,
        "refresh_mode": arguments.refresh_mode,
        "refresh_token": arguments.refresh_token,
        "token_url": arguments.token_url,
        "db_table": arguments.db_table,
        "apis": api_configs
    }


def main():
    args = parse_cli_arguments()
    config = build_api_config(args)

    print(f"System: {config['system_name']}")
    print(f"APIs loaded: {len(config['apis'])}")
    print(f"Target table: {config['db_table']}")
    for api in config["apis"]:
        print(f"- {api['url']} (OAuth1 session ready)")


if __name__ == "__main__":
    main()




#!/usr/bin/env python3
from requests_oauthlib import OAuth1
import requests

TOKENS_PER_API = 4  # consumer_key, consumer_secret, access_token, access_secret


def split_into_groups(items, group_size):
    """Split a flat list into equal-sized chunks."""
    return [items[pos:pos + group_size] for pos in range(0, len(items), group_size)]


def build_api_config(api_urls: str, api_tokens: str):
    """
    Build API configuration with OAuth1 sessions.

    Args:
        api_urls: Comma-separated API URLs (e.g. "url1,url2")
        api_tokens: Comma-separated tokens (4 per API)
                    (consumer_key,consumer_secret,access_token,access_secret,...)

    Returns:
        List of dictionaries with 'url' and 'auth' (OAuth1 session).
    """
    urls = [url.strip() for url in api_urls.split(",") if url.strip()]
    tokens = [token.strip() for token in api_tokens.split(",") if token.strip()]

    if len(tokens) != len(urls) * TOKENS_PER_API:
        raise ValueError(f"Expected {TOKENS_PER_API} tokens per API; "
                         f"got {len(tokens)} for {len(urls)} URLs.")

    token_groups = split_into_groups(tokens, TOKENS_PER_API)

    api_configs = []
    for api_url, credentials in zip(urls, token_groups):
        consumer_key, consumer_secret, access_token, access_secret = credentials
        oauth_session = OAuth1(
            consumer_key,
            consumer_secret,
            access_token,
            access_secret
        )
        api_configs.append({
            "url": api_url,
            "auth": oauth_session
        })

    return api_configs


def main():
    """
    Main entry: builds API configs and authenticates with OAuth1.
    (Replace static values with arguments, env vars, or config file as needed.)
    """
    api_urls = "https://api.a.com,https://api.b.com"
    api_tokens = "ck1,cs1,at1,as1,ck2,cs2,at2,as2"

    api_configs = build_api_config(api_urls, api_tokens)

    for api in api_configs:
        # Example of making an authenticated GET request
        response = requests.get(api["url"], auth=api["auth"], timeout=10)
        print(f"{api['url']} -> Status: {response.status_code}")


if __name__ == "__main__":
    main()

