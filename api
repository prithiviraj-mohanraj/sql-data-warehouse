apis:
  knt:
    url: https://api.knt.example.com/v1/data
    oauth1:
      consumer_key: "KNT_CONSUMER_KEY_VALUE"
      consumer_secret: "KNT_CONSUMER_SECRET_VALUE"
      access_token: "KNT_ACCESS_TOKEN_VALUE"
      access_secret: "KNT_ACCESS_SECRET_VALUE"

  lnt:
    url: https://api.lnt.example.com/v1/data
    oauth1:
      consumer_key: "LNT_CONSUMER_KEY_VALUE"
      consumer_secret: "LNT_CONSUMER_SECRET_VALUE"
      access_token: "LNT_ACCESS_TOKEN_VALUE"
      access_secret: "LNT_ACCESS_SECRET_VALUE"
#!/usr/bin/env python3
import sys, yaml
from typing import Dict
from requests_oauthlib import OAuth1

def load_apis(yaml_path: str) -> Dict[str, Dict]:
    """Return {'knt': {'url': str, 'auth': OAuth1}, 'lnt': {...}}."""
    with open(yaml_path, "r", encoding="utf-8") as f:
        data = yaml.safe_load(f) or {}
    apis = data["apis"]

    def build(key: str):
        cfg = apis[key]
        c = cfg["oauth1"]
        return {
            "url": cfg["url"].strip(),
            "auth": OAuth1(
                c["consumer_key"].strip(),
                c["consumer_secret"].strip(),
                c["access_token"].strip(),
                c["access_secret"].strip(),
            ),
        }

    return {"knt": build("knt"), "lnt": build("lnt")}

if __name__ == "__main__":
    # Keep ONLY table properties via CLI (example: 7 properties)
    if len(sys.argv) < 8:
        raise SystemExit("Usage: script.py <table> <prop2> <prop3> <prop4> <prop5> <prop6> <prop7>")
    table, prop2, prop3, prop4, prop5, prop6, prop7 = sys.argv[1:8]

    # Load API creds (knt & lnt) from YAML
    apis = load_apis("apis.yaml")
    knt_url, knt_auth = apis["knt"]["url"], apis["knt"]["auth"]
    lnt_url, lnt_auth = apis["lnt"]["url"], apis["lnt"]["auth"]

    # Use your existing functions/objects:
    # api_pull(spark, "knt", knt_url, knt_auth)
    # api_pull(spark, "lnt", lnt_url, lnt_auth)

    # Then proceed to use: table, prop2..prop7 as you already do.
